{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/DFS.js","algorithms/BFS.js","algorithms/Astar.js","Mazes/recursiveDivisionMaze.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","MouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","onMouseDown","Component","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","neighbors","push","length","filter","neighbor","isVisited","getUnvisitedNeighbors","previousNode","dijkstra","startNode","finishNode","visitedNodesInOrder","nodes","getAllNodes","closestNode","shift","Infinity","check","DFS","depthfirstsearch","BFS","unvisitednodes","breathfirstsearch","calculateheuristicdistance","currentNode","abs","Astarsearch","heuristic","get_next_node","i","generator","require","wallnodes","Check","j","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Text_to_print","undefined","info_to_print","parent_line","PathfindingVisualizer","state","mouseIsPressed","selectedvalue","value","algo","status","getInitialGrid","setState","window","location","reload","newGrid","getNewGridWithWallToggled","s","printinfoaboutalgo","alert","maze","top","recursiveDivisionMaze","handleMouseDown","handleMouseEnter","handleMouseUp","nodesInShortestPathOrder","setTimeout","animateShortestPathDijkstra","document","getElementById","Animation_speed","invertbuttons","printnameofthealgo","unshift","getNodesInShortestPathOrderDijkstra","animateDijkstra","checkfirst","animateShortestPathDFS","getNodesInShortestPathOrderDFS","animateDFS","animateShortestPathBFS","getNodesInShortestPathOrderBFS","animateBFS","animateShortestPathAstar","Astar","getNodesInShortestPathOrderAstar","animateAstar","Fragment","map","rowIdx","key","nodeIdx","class","onClick","Refresh_all","disabled","visualizeDijkstra","visualizeDFS","visualizeBFS","visualizeAstar","insertmaze","onChange","currentRow","createNode","slice","newNode","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71273f8c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      MouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => MouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","var visitedNodesInOrder = [];\nvar check = 0;\nfunction depthfirstsearch(grid, node, startNode, finishNode) {\n  const { row, col } = node;\n  node.isVisited = true;\n\n  if (check === 1 || node === finishNode) {\n    check = 1;\n    return;\n  }\n  visitedNodesInOrder.push(node);\n  if (\n    row > 0 &&\n    grid[row - 1][col].isVisited === false &&\n    grid[row - 1][col].isWall === false\n  ) {\n    grid[row - 1][col].previousNode = node;\n    depthfirstsearch(grid, grid[row - 1][col], startNode, finishNode);\n  }\n  if (\n    col < grid[0].length - 1 &&\n    grid[row][col + 1].isVisited === false &&\n    grid[row][col + 1].isWall === false\n  ) {\n    grid[row][col + 1].previousNode = node;\n    depthfirstsearch(grid, grid[row][col + 1], startNode, finishNode);\n  }\n  if (\n    row < grid.length - 1 &&\n    grid[row + 1][col].isVisited === false &&\n    grid[row + 1][col].isWall === false\n  ) {\n    grid[row + 1][col].previousNode = node;\n    depthfirstsearch(grid, grid[row + 1][col], startNode, finishNode);\n  }\n  if (\n    col > 0 &&\n    grid[row][col - 1].isVisited === false &&\n    grid[row][col - 1].isWall === false\n  ) {\n    grid[row][col - 1].previousNode = node;\n    depthfirstsearch(grid, grid[row][col - 1], startNode, finishNode);\n  }\n}\nexport function DFS(grid, startNode, finishNode) {\n  startNode.distance = 0;\n  depthfirstsearch(grid, startNode, startNode, finishNode);\n  return visitedNodesInOrder;\n}\n\nexport function getNodesInShortestPathOrderDFS(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nconst visitedNodesInOrder = [];\nfunction breathfirstsearch(grid, startNode, finishNode) {\n  const unvisitednodes = [];\n  unvisitednodes.push(startNode);\n  while (unvisitednodes.length > 0) {\n    var node = unvisitednodes[0];\n    unvisitednodes.shift();\n    node.isVisited = true;\n    if (node.isWall) continue;\n    visitedNodesInOrder.push(node);\n    if (node === finishNode) return;\n    const { row, col } = node;\n    if (row > 0 && grid[row - 1][col].isVisited === false) {\n      grid[row - 1][col].isVisited = true;\n      grid[row - 1][col].previousNode = node;\n\n      unvisitednodes.push(grid[row - 1][col]);\n    }\n    if (col > 0 && grid[row][col - 1].isVisited === false) {\n      grid[row][col - 1].isVisited = true;\n      grid[row][col - 1].previousNode = node;\n      unvisitednodes.push(grid[row][col - 1]);\n    }\n    if (row < grid.length - 1 && grid[row + 1][col].isVisited === false) {\n      grid[row + 1][col].isVisited = true;\n      grid[row + 1][col].previousNode = node;\n\n      unvisitednodes.push(grid[row + 1][col]);\n    }\n    if (col < grid[0].length - 1 && grid[row][col + 1].isVisited === false) {\n      grid[row][col + 1].isVisited = true;\n      grid[row][col + 1].previousNode = node;\n\n      unvisitednodes.push(grid[row][col + 1]);\n    }\n  }\n}\nexport function BFS(grid, startNode, finishNode) {\n  startNode.distance = 0;\n  breathfirstsearch(grid, startNode, finishNode);\n  return visitedNodesInOrder;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrderBFS(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import { sort, abs } from \"mathjs\";\n\nvar visitedNodesInOrder = [];\nvar check = 0;\nfunction calculateheuristicdistance(currentNode, finishNode) {\n  const cell = {\n    distance:\n      abs(currentNode.row - finishNode.row) +\n      abs(currentNode.col - finishNode.col),\n    node: currentNode,\n  };\n  return cell;\n}\nfunction get_next_node(grid, currentNode, finishNode) {\n  var heuristic = [];\n  const { row, col } = currentNode;\n  if (\n    row > 0 &&\n    grid[row - 1][col].isVisited === false &&\n    grid[row - 1][col].isWall === false\n  ) {\n    heuristic.push(calculateheuristicdistance(grid[row - 1][col], finishNode));\n  }\n  if (\n    row < grid.length - 1 &&\n    grid[row + 1][col].isVisited === false &&\n    grid[row + 1][col].isWall === false\n  ) {\n    heuristic.push(calculateheuristicdistance(grid[row + 1][col], finishNode));\n  }\n  if (\n    col > 0 &&\n    grid[row][col - 1].isVisited === false &&\n    grid[row][col - 1].isWall === false\n  ) {\n    heuristic.push(calculateheuristicdistance(grid[row][col - 1], finishNode));\n  }\n  if (\n    col < grid[0].length - 1 &&\n    grid[row][col + 1].isVisited === false &&\n    grid[row][col + 1].isWall === false\n  ) {\n    heuristic.push(calculateheuristicdistance(grid[row][col + 1], finishNode));\n  }\n  heuristic.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  return heuristic;\n}\nfunction Astarsearch(grid, currentNode, finishNode) {\n  if (check) return;\n  currentNode.isVisited = true;\n  visitedNodesInOrder.push(currentNode);\n  if (currentNode === finishNode) {\n    check = 1;\n  }\n  const heuristic = get_next_node(grid, currentNode, finishNode);\n  for (let i = 0; i < heuristic.length; i++) {\n    heuristic[i].node.previousNode = currentNode;\n    Astarsearch(grid, heuristic[i].node, finishNode);\n  }\n}\n\nexport function Astar(grid, startNode, finishNode) {\n  Astarsearch(grid, startNode, finishNode);\n  return visitedNodesInOrder;\n}\nexport function getNodesInShortestPathOrderAstar(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","var generator = require(\"generate-maze\");\n\nvar wallnodes = [];\nfunction Check(startNode, finishNode, i, j) {\n  if (startNode.row === i && startNode.col === j) return 0;\n  if (finishNode.row === i && finishNode.col === j) return 0;\n  return 1;\n}\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\n  var maze = generator(50, 20);\n  for (let i = 0; i < 20; i++) {\n    for (let j = 0; j < 50; j++) {\n      if (maze[i][j].top && Check(startNode, finishNode, i, j)) {\n        wallnodes.push(grid[i][j]);\n      }\n    }\n  }\n  return grid;\n}\nexport function getwallnodes() {\n  return wallnodes;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport {\n  dijkstra,\n  getNodesInShortestPathOrderDijkstra,\n} from \"../algorithms/dijkstra\";\nimport { DFS, getNodesInShortestPathOrderDFS } from \"../algorithms/DFS\";\nimport { BFS, getNodesInShortestPathOrderBFS } from \"../algorithms/BFS\";\nimport { Astar, getNodesInShortestPathOrderAstar } from \"../algorithms/Astar\";\nimport {\n  recursiveDivisionMaze,\n  getwallnodes,\n} from \"../Mazes/recursiveDivisionMaze\";\nimport \"./PathfindingVisualizer.css\";\n\nvar START_NODE_ROW = 5;\nvar START_NODE_COL = 10;\nvar FINISH_NODE_ROW = 15;\nvar FINISH_NODE_COL = 40;\nvar Animation_speed = 50;\nvar Text_to_print = undefined;\nvar info_to_print = undefined;\nvar print_status = undefined;\nvar parent_line = \"Select one Algorithm to Visualize\";\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      selectedvalue: \"Dijkstra\",\n      value: false,\n      algo: null,\n      status: null,\n    };\n  }\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n  Refresh_all() {\n    window.location.reload(false);\n  }\n  handleMouseDown(row, col) {\n    if (this.state.value) return;\n    var check = 0;\n    if (row === START_NODE_ROW && col === START_NODE_COL) {\n      check = 1;\n    } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\n      check = 2;\n    }\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, check);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.value) return;\n    if (!this.state.mouseIsPressed) return;\n    var check = 0;\n    if (row === START_NODE_ROW && col === START_NODE_COL) {\n      check = 1;\n    } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\n      check = 2;\n    }\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, check);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    if (this.state.value) return;\n    this.setState({ mouseIsPressed: false });\n  }\n  invertbuttons() {\n    const { value } = this.state.value;\n    this.setState({ value: !value });\n  }\n  printnameofthealgo(s) {\n    parent_line = undefined;\n    if (s === \"DFS\") {\n      Text_to_print = \"You have selected Depth First Search\";\n    } else if (s === \"BFS\") {\n      Text_to_print = \"You have selected Breath First Search\";\n    } else if (s === \"Astar\") {\n      Text_to_print = \"You have selected A* Search Algorithm\";\n    } else {\n      Text_to_print = \"You have selected Dijkstra Algorithm\";\n    }\n    this.printinfoaboutalgo(s);\n  }\n  printinfoaboutalgo(s) {\n    if (s === \"DFS\") {\n      info_to_print =\n        \"Explores the node branch as far as possible prior to backtrack. It doesn't guarantees the shortest path.\";\n    } else if (s === \"BFS\") {\n      info_to_print =\n        \"Explores the nodes ,layer by layer.It doesn't Guarantees the shortest path.\";\n    } else if (s === \"Astar\") {\n      info_to_print =\n        \"At each step,A* uses Heuristic distance to move on. It doesn't guarantees the shortest path.\";\n    } else {\n      info_to_print =\n        \"Dijkstra's Algorithm is weighted. It guarantees the shortest path.\";\n    }\n  }\n  checkfirst() {\n    if (START_NODE_ROW === -1) {\n      alert(\"Kindly Select Starting Node\");\n    }\n    if (FINISH_NODE_ROW === -1) {\n      alert(\"Kindly Select Finishing Node\");\n    }\n  }\n  insertmaze() {\n    var { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    grid = recursiveDivisionMaze(grid, startNode, finishNode);\n    const wallnodes = getwallnodes();\n    for (let i = 0; i < wallnodes.length; i++) {\n      const { row, col } = wallnodes[i];\n      this.handleMouseDown(row, col);\n      this.handleMouseEnter(row, col);\n      this.handleMouseUp(row, col);\n    }\n  }\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPathDijkstra(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, (Animation_speed / 5) * i);\n    }\n  }\n  animateShortestPathDijkstra(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, Animation_speed * i);\n    }\n  }\n  visualizeDijkstra() {\n    if (START_NODE_ROW === -1 || FINISH_NODE_ROW == -1) {\n      this.checkfirst();\n      return;\n    }\n    this.invertbuttons();\n    this.printnameofthealgo(\"Dijkstra\");\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(\n      finishNode\n    );\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  animateDFS(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPathDFS(nodesInShortestPathOrder);\n        }, 20 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 20 * i);\n    }\n  }\n  animateShortestPathDFS(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n  visualizeDFS() {\n    if (START_NODE_ROW === -1 || FINISH_NODE_ROW == -1) {\n      this.checkfirst();\n      return;\n    }\n    this.invertbuttons();\n    this.printnameofthealgo(\"DFS\");\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = DFS(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(finishNode);\n    this.animateDFS(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  animateBFS(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPathBFS(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n  animateShortestPathBFS(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n  visualizeBFS() {\n    if (START_NODE_ROW === -1 || FINISH_NODE_ROW == -1) {\n      this.checkfirst();\n      return;\n    }\n    this.invertbuttons();\n    this.printnameofthealgo(\"BFS\");\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = BFS(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(finishNode);\n    this.animateBFS(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  animateAstar(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPathAstar(nodesInShortestPathOrder);\n        }, 20 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 20 * i);\n    }\n  }\n  animateShortestPathAstar(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n  visualizeAstar() {\n    if (START_NODE_ROW === -1 || FINISH_NODE_ROW == -1) {\n      this.checkfirst();\n      return;\n    }\n    this.invertbuttons();\n    this.printnameofthealgo(\"Astar\");\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = Astar(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderAstar(\n      finishNode\n    );\n    this.animateAstar(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      MouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n\n        <div class=\"navbar a\">\n          <h1>Pathfinding Visualizer</h1>\n          <button class=\"butt\" onClick={() => this.Refresh_all()}>\n            <span>Reset!</span>\n          </button>\n          <button\n            class=\"button button1\"\n            disabled={this.state.value}\n            onClick={() => this.visualizeDijkstra()}\n          >\n            Dijkstra\n          </button>\n          <button\n            class=\"button button2\"\n            disabled={this.state.value}\n            onClick={() => this.visualizeDFS()}\n          >\n            DFS\n          </button>\n          <button\n            class=\"button button3\"\n            disabled={this.state.value}\n            onClick={() => this.visualizeBFS()}\n          >\n            BFS\n          </button>\n          <button\n            class=\"button button5\"\n            disabled={this.state.value}\n            onClick={() => this.visualizeAstar()}\n          >\n            A* Search\n          </button>\n          <button\n            class=\"button button4\"\n            disabled={this.state.value}\n            onClick={() => this.insertmaze()}\n          >\n            Insert/Change Maze\n          </button>\n        </div>\n        <div className=\"box\">\n          <div>\n            <h2>{parent_line}</h2>\n          </div>\n          <div onChange={(algo) => this.printnameofthealgo(algo)}>\n            <h3>{Text_to_print}</h3>\n          </div>\n          <div onChange={(algo) => this.printinfoaboutalgo(algo)}>\n            {info_to_print}\n          </div>\n        </div>\n        <div className=\"bottomright\">\n          <p>Made by: Ishank Mittal</p>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col, check) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (START_NODE_ROW === -1) {\n    const newNode = {\n      ...node,\n      isStart: !node.isStart,\n    };\n    START_NODE_ROW = row;\n    START_NODE_COL = col;\n    newGrid[row][col] = newNode;\n  } else if (FINISH_NODE_COL === -1) {\n    const newNode = {\n      ...node,\n      isFinish: !node.isFinish,\n    };\n    FINISH_NODE_ROW = row;\n    FINISH_NODE_COL = col;\n    newGrid[row][col] = newNode;\n  } else if (check === 1) {\n    const newNode = {\n      ...node,\n      isStart: !node.isStart,\n    };\n    START_NODE_ROW = -1;\n    START_NODE_COL = -1;\n    newGrid[row][col] = newNode;\n  } else if (check === 2) {\n    const newNode = {\n      ...node,\n      isFinish: !node.isFinish,\n    };\n    FINISH_NODE_ROW = -1;\n    FINISH_NODE_COL = -1;\n    newGrid[row][col] = newNode;\n  } else {\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n  }\n\n  return newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n// ReactDom.render();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}