{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/DFS.js","algorithms/BFS.js","Mazes/recursiveDivisionMaze.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","neighbors","push","length","filter","neighbor","isVisited","getUnvisitedNeighbors","previousNode","dijkstra","startNode","finishNode","visitedNodesInOrder","nodes","getAllNodes","closestNode","shift","Infinity","check","DFS","depthfirstsearch","BFS","unvisitednodes","breathfirstsearch","wallnodes","fake_grid","recursiveDivisionMaze","fake","j","i","makefakegrid","x","Math","floor","random","y","console","log","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","componentDidMount","handleMouseDown","handleMouseEnter","handleMouseUp","nodesInShortestPathOrder","setTimeout","animateShortestPathDijkstra","document","getElementById","Animation_speed","currentNode","unshift","getNodesInShortestPathOrderDijkstra","animateDijkstra","animateShortestPathDFS","getNodesInShortestPathOrderDFS","animateDFS","animateShortestPathBFS","getNodesInShortestPathOrderBFS","animateBFS","class","onClick","visualizeDijkstra","visualizeBFS","visualizeDFS","visualizeAstar","insertmaze","map","rowIdx","key","nodeIdx","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.626b00fd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (unvisitedNodes.length > 0) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","const visitedNodesInOrder = [];\nvar check = 0;\nfunction depthfirstsearch(grid, node, startNode, finishNode) {\n  const { row, col } = node;\n  node.isVisited = true;\n  visitedNodesInOrder.push(node);\n  if (check || node === finishNode) {\n    check = 1;\n    return;\n  }\n  if (\n    row > 0 &&\n    grid[row - 1][col].isVisited === false &&\n    grid[row - 1][col].isWall === false\n  ) {\n    grid[row - 1][col].previousNode = node;\n    depthfirstsearch(grid, grid[row - 1][col], startNode, finishNode);\n  }\n  if (\n    col < grid[0].length - 1 &&\n    grid[row][col + 1].isVisited === false &&\n    grid[row][col + 1].isWall === false\n  ) {\n    grid[row][col + 1].previousNode = node;\n    depthfirstsearch(grid, grid[row][col + 1], startNode, finishNode);\n  }\n  if (\n    row < grid.length - 1 &&\n    grid[row + 1][col].isVisited === false &&\n    grid[row + 1][col].isWall === false\n  ) {\n    grid[row + 1][col].previousNode = node;\n    depthfirstsearch(grid, grid[row + 1][col], startNode, finishNode);\n  }\n  if (\n    col > 0 &&\n    grid[row][col - 1].isVisited === false &&\n    grid[row][col - 1].isWall === false\n  ) {\n    grid[row][col - 1].previousNode = node;\n    depthfirstsearch(grid, grid[row][col - 1], startNode, finishNode);\n  }\n}\nexport function DFS(grid, startNode, finishNode) {\n  startNode.distance = 0;\n  depthfirstsearch(grid, startNode, startNode, finishNode);\n  return visitedNodesInOrder;\n}\n\nexport function getNodesInShortestPathOrderDFS(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nconst visitedNodesInOrder = [];\nfunction breathfirstsearch(grid, startNode, finishNode) {\n  const unvisitednodes = [];\n  unvisitednodes.push(startNode);\n  while (unvisitednodes.length > 0) {\n    var node = unvisitednodes[0];\n    unvisitednodes.shift();\n    node.isVisited = true;\n    if (node.isWall) continue;\n    visitedNodesInOrder.push(node);\n    if (node === finishNode) return;\n    const { row, col } = node;\n    if (row > 0 && grid[row - 1][col].isVisited === false) {\n      grid[row - 1][col].isVisited = true;\n      grid[row - 1][col].previousNode = node;\n\n      unvisitednodes.push(grid[row - 1][col]);\n    }\n    if (col > 0 && grid[row][col - 1].isVisited === false) {\n      grid[row][col - 1].isVisited = true;\n      grid[row][col - 1].previousNode = node;\n      unvisitednodes.push(grid[row][col - 1]);\n    }\n    if (row < grid.length - 1 && grid[row + 1][col].isVisited === false) {\n      grid[row + 1][col].isVisited = true;\n      grid[row + 1][col].previousNode = node;\n\n      unvisitednodes.push(grid[row + 1][col]);\n    }\n    if (col < grid[0].length - 1 && grid[row][col + 1].isVisited === false) {\n      grid[row][col + 1].isVisited = true;\n      grid[row][col + 1].previousNode = node;\n\n      unvisitednodes.push(grid[row][col + 1]);\n    }\n  }\n}\nexport function BFS(grid, startNode, finishNode) {\n  startNode.distance = 0;\n  breathfirstsearch(grid, startNode, finishNode);\n  return visitedNodesInOrder;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrderBFS(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","var wallnodes = [];\nvar fake_grid = [];\nfunction makefakegrid(grid, startNode, finishNode) {\n  const fake = [];\n  for (let j = 0; j < grid[0].length; j++) {\n    fake.push(1);\n  }\n  for (let i = 0; i < grid.length; i++) {\n    fake_grid.push(fake);\n  }\n  fake_grid[startNode.row][startNode.col] = 0;\n  fake_grid[finishNode.row][finishNode.col] = 0;\n}\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\n  makefakegrid(grid, startNode, finishNode);\n  let j = 1000;\n  let i = 0;\n  while (i < j) {\n    let x = Math.floor(Math.random() * 25);\n    let y = Math.floor(Math.random() * 61);\n    if (x < grid.length && y < grid[0].length && fake_grid[x][y]) {\n      console.log(x, y);\n      i++;\n      wallnodes.push(grid[x][y]);\n    }\n  }\n  return grid;\n}\nexport function getwallnodes() {\n  return wallnodes;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport {\n  dijkstra,\n  getNodesInShortestPathOrderDijkstra,\n} from \"../algorithms/dijkstra\";\nimport { DFS, getNodesInShortestPathOrderDFS } from \"../algorithms/DFS\";\nimport { BFS, getNodesInShortestPathOrderBFS } from \"../algorithms/BFS\";\nimport { Astar, getNodesInShortestPathOrderAtsar } from \"../algorithms/Astar\";\nimport {\n  recursiveDivisionMaze,\n  getwallnodes,\n} from \"../Mazes/recursiveDivisionMaze\";\nimport \"./PathfindingVisualizer.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 45;\nconst Animation_speed = 50;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    console.log(row, col);\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n  insertmaze() {\n    this.componentDidMount();\n    var { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    grid = recursiveDivisionMaze(grid, startNode, finishNode);\n    const wallnodes = getwallnodes();\n    for (let i = 0; i < wallnodes.length; i++) {\n      const { row, col } = wallnodes[i];\n      this.handleMouseDown(row, col);\n      this.handleMouseEnter(row, col);\n      this.handleMouseUp(row, col);\n    }\n  }\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPathDijkstra(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, (Animation_speed / 5) * i);\n    }\n  }\n  animateShortestPathDijkstra(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, Animation_speed * i);\n    }\n  }\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(\n      finishNode\n    );\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  animateDFS(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPathDFS(nodesInShortestPathOrder);\n        }, 20 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 20 * i);\n    }\n  }\n  animateShortestPathDFS(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n  visualizeDFS() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = DFS(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(finishNode);\n    this.animateDFS(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  animateBFS(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPathBFS(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n  animateShortestPathBFS(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n  visualizeBFS() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = BFS(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(finishNode);\n    this.animateBFS(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  visualizeAstar() {}\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <>\n        <div class=\"navbar\">\n          <h1>Pathfinding Visualizer</h1>\n          <button onClick={() => this.visualizeDijkstra()}>\n            <h3>Visualize Dijkstra's Algorithm</h3>\n          </button>\n          <button onClick={() => this.visualizeBFS()}>\n            <h3>Visualize BFS Algorithm</h3>\n          </button>\n          <button onClick={() => this.visualizeDFS()}>\n            <h3>Visualize DFS Algorithm</h3>\n          </button>\n          <button onClick={() => this.visualizeAstar()}>\n            <h3>Visualize A* search</h3>\n          </button>\n          <button onClick={() => this.insertmaze()}>\n            <h3>Insert/Change Maze</h3>\n          </button>\n        </div>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 24; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 60; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}